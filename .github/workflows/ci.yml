name: CI - Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate
        env:
          DATABASE_URL: "postgresql://user:password@localhost:5432/test_db"

      - name: Run ESLint
        run: pnpm lint

      - name: Type check
        run: pnpm exec tsc --noEmit

  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint-and-typecheck

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: pnpm db:push
        env:
          DATABASE_URL: "postgresql://user:password@localhost:5432/test_db"

      - name: Build application (clean)
        run: pnpm build:clean
        env:
          DATABASE_URL: "postgresql://user:password@localhost:5432/test_db"
          NEXT_TELEMETRY_DISABLED: 1
          # Add other required environment variables
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY || 'sk_test_dummy_key_for_build' }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY || 'pk_test_dummy_key_for_build' }}
          NEXT_PUBLIC_CLERK_SIGN_IN_URL: "/sign-in"
          NEXT_PUBLIC_CLERK_SIGN_UP_URL: "/sign-up"

      - name: Check build output
        run: |
          if [ ! -d ".next" ]; then
            echo "Build failed: .next directory not found"
            exit 1
          fi
          if [ ! -f ".next/BUILD_ID" ]; then
            echo "Build failed: BUILD_ID not found"
            exit 1
          fi
          echo "✅ Build completed successfully"
          echo "Build ID: $(cat .next/BUILD_ID)"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: lint-and-typecheck
    if: false # Enable this when you add tests

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        uses: actions/setup-node@v4
        with:
          version: 10.15.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: pnpm db:push
        env:
          DATABASE_URL: "postgresql://user:password@localhost:5432/test_db"

      - name: Run tests
        run: pnpm test
        env:
          DATABASE_URL: "postgresql://user:password@localhost:5432/test_db"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level high
        continue-on-error: true

  build-status:
    name: Build Status Summary
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build, security-audit]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "Lint and TypeCheck: ${{ needs.lint-and-typecheck.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          
          if [[ "${{ needs.lint-and-typecheck.result }}" != "success" ]]; then
            echo "❌ Linting or type checking failed"
            exit 1
          fi
          
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Build failed"
            exit 1
          fi
          
          echo "✅ All critical checks passed!"
